package src.TestCase;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import src.Server.new_server.Server;
import src.UserDatabase.User;
import src.UserDatabase.UserDatabase;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.Socket;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit test class for testing the login functionality of the {@link Server.ClientHandler} class.
 * <p>
 * This class tests various login scenarios, including successful login, login with incorrect passwords,
 * and login attempts with non-existent users. It simulates user input and captures the output generated
 * by the client handler to verify that the server responds correctly in each case.
 * </p>
 * <p>
 * The tests rely on mock objects and simulate server-client communication using mock sockets and
 * input/output streams. The {@link Server.ClientHandler} is tested directly to ensure the login logic works as expected.
 * </p>
 */
public class ServerTest {

    /**
     * The user database instance used for testing login functionality.
     * This simulates a user database, where test users can be added and retrieved.
     */
    private UserDatabase userDatabase;

    /**
     * A mock socket to simulate the client-server communication.
     * The socket is not used directly but is required to instantiate the {@link Server.ClientHandler}.
     */
    private Socket mockSocket;

    /**
     * A mock input reader to simulate reading data from the client.
     * This is used to simulate user input for login attempts.
     */
    private BufferedReader mockReader;

    /**
     * A mock output writer to capture the output generated by the {@link Server.ClientHandler}.
     * This is used to verify the server's response to the client.
     */
    private PrintWriter mockWriter;

    /**
     * The client handler instance responsible for handling client communication in the server.
     * This is the class being tested for login functionality.
     */
    private Server.ClientHandler clientHandler;

    /**
     * Sets up the test environment by initializing the mock user database, user input/output streams,
     * and the {@link Server.ClientHandler} instance.
     * This method runs before each test case to ensure a clean test environment.
     */
    @BeforeEach
    void setUp() {
        // Create a user database and populate with test users
        userDatabase = new UserDatabase("userdb.txt");
        User mockUser = new User("testUser", "password123");
        userDatabase.addUser(mockUser);  // Adding mock user to simulate the database

        // Initialize mock socket and I/O streams for testing
        mockSocket = new Socket(); // We don't actually use the socket, just need a placeholder
        StringWriter writer = new StringWriter();  // Capture output
        mockWriter = new PrintWriter(writer);

        // Prepare a mock input stream for BufferedReader
        StringReader reader = new StringReader(""); // Empty initially; we'll simulate input dynamically
        mockReader = new BufferedReader(reader);

        // Create the client handler instance
        clientHandler = new Server.ClientHandler(mockSocket);
        clientHandler.in = mockReader;
        clientHandler.out = mockWriter;
    }

    /**
     * Test case to verify successful login with valid credentials.
     * <p>
     * This test simulates the client entering a valid username ("testUser") and password ("password123").
     * The expected output is a success message indicating that the login was successful.
     * </p>
     *
     * @throws IOException if an I/O error occurs during the test
     */
    @Test
    void testLogin_Success() throws IOException {
        // Simulate user input for login: username "testUser", password "password123"
        String input = "testUser\npassword123\n";
        mockReader = new BufferedReader(new StringReader(input));
        clientHandler.in = mockReader;  // Reassign the mock reader

        // Run the login method (this is part of the client handler's loop)
        clientHandler.login();

        // Capture the output from PrintWriter
        String output = mockWriter.toString();

        // Verify that the output was correct (successful login)
        assertTrue(output.contains("Login successful!"));
    }

    /**
     * Test case to verify login failure when the user enters the correct username but an incorrect password.
     * <p>
     * This test simulates the client entering a valid username ("testUser") but an incorrect password ("wrongPassword").
     * The expected output is an error message indicating invalid credentials.
     * </p>
     *
     * @throws IOException if an I/O error occurs during the test
     */
    @Test
    void testLogin_Failure() throws IOException {
        // Simulate user input for login: correct username "testUser", wrong password
        String input = "testUser\nwrongPassword\n";
        mockReader = new BufferedReader(new StringReader(input));
        clientHandler.in = mockReader;  // Reassign the mock reader

        // Run the login method
        clientHandler.login();

        // Capture the output from PrintWriter
        String output = mockWriter.toString();

        // Verify that the output was correct (invalid credentials)
        assertTrue(output.contains("Invalid credentials."));
    }

    /**
     * Test case to verify login failure when the user enters a non-existent username.
     * <p>
     * This test simulates the client entering a non-existent username ("nonExistentUser") and any password.
     * The expected output is an error message indicating invalid credentials, as the user does not exist.
     * </p>
     *
     * @throws IOException if an I/O error occurs during the test
     */
    @Test
    void testLogin_UserNotFound() throws IOException {
        // Simulate user input for login: non-existent username "nonExistentUser"
        String input = "nonExistentUser\npassword123\n";
        mockReader = new BufferedReader(new StringReader(input));
        clientHandler.in = mockReader;  // Reassign the mock reader

        // Run the login method
        clientHandler.login();

        // Capture the output from PrintWriter
        String output = mockWriter.toString();

        // Verify that the output was correct (invalid credentials)
        assertTrue(output.contains("Invalid credentials."));
    }
}
